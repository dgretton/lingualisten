<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Quiz - Spring Landscaping</title>
    <meta name="description" content="Quiz de inglés para trabajadores de jardinería">
    <meta name="theme-color" content="#3B82F6">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <style>
        button {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
        }
        
        html {
            -webkit-text-size-adjust: 100%;
            touch-action: manipulation;
        }
        
        body {
            overscroll-behavior-y: contain;
            background-color: #f3f4f6;
        }
        
        .option-button {
            transition: all 0.2s;
        }
        
        .correct-answer {
            font-weight: bold;
            border-color: #10B981;
            background-color: #D1FAE5;
        }
        
        .incorrect-answer {
            text-decoration: line-through;
            border-color: #EF4444;
            background-color: #FEE2E2;
        }
        
        .user-selected {
            border-width: 2px;
            border-color: #3B82F6;
        }
        
        .offline-indicator {
            position: fixed;
            bottom: 10px;
            right: 10px;
            padding: 4px 8px;
            background-color: #4B5563;
            color: white;
            border-radius: 9999px;
            font-size: 12px;
            z-index: 1000;
            opacity: 0.8;
        }
        
        .toast {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #10B981;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 1000;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        .toast.show {
            opacity: 1;
        }
        
        .install-prompt {
            margin-top: 12px;
            padding: 10px;
            background-color: #EFF6FF;
            border: 1px solid #BFDBFE;
            border-radius: 8px;
            font-size: 14px;
        }
        
        @media print {
            .no-print {
                display: none;
            }
            
            .print-only {
                display: block;
            }
            
            button {
                border: 1px solid #ccc !important;
                color: #000 !important;
                background-color: #fff !important;
            }
            
            .correct-answer {
                font-weight: bold !important;
                border-color: #333 !important;
            }
            
            .incorrect-answer {
                text-decoration: line-through !important;
            }
            
            .user-selected {
                border-width: 2px !important;
                border-color: #666 !important;
            }
        }
    </style>
</head>
<body>
    <div id="offlineIndicator" class="offline-indicator hidden">
        Modo sin conexión
    </div>
    
    <div id="toast" class="toast"></div>
    
    <div id="app" class="max-w-3xl mx-auto p-4 font-sans">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold">Spring Landscaping Quiz</h1>
            <div>
                <span id="score-display" class="text-lg font-semibold">0/0</span>
            </div>
        </div>
        
        <div id="previousSessionAlert" class="mb-6 bg-blue-50 p-3 rounded-lg border border-blue-200 hidden">
            <p class="text-blue-800">Continuando desde tu sesión anterior. Tus respuestas han sido guardadas.</p>
        </div>
        
        <div id="offline-info" class="mb-6 bg-green-50 p-3 rounded-lg border border-green-200">
            <p class="text-green-800">Esta página funciona sin internet después de cargarla por primera vez. Puede volver a ella en cualquier momento sin usar datos adicionales.</p>
            
            <div id="install-prompt" class="install-prompt hidden">
                <p class="font-bold">Para mejor experiencia:</p>
                <p>Instala esta aplicación en tu teléfono:</p>
                <ul class="list-disc pl-5 mt-2">
                    <li class="mb-1">iPhone: Toca el ícono de compartir ⎯⃝ y selecciona "Agregar a pantalla de inicio"</li>
                    <li>Android: Toca el menú ⋮ y selecciona "Agregar a pantalla principal"</li>
                </ul>
            </div>
        </div>
        
        <div class="mb-6">
            <label for="student-name" class="block text-gray-700 text-sm font-bold mb-2">Nombre:</label>
            <input type="text" id="student-name" placeholder="Escribe tu nombre aquí" required
                   class="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>
        
        <div class="mb-6 bg-blue-50 p-3 rounded-lg border border-blue-200">
            <p class="text-blue-800">Haz clic en la traducción española correcta del audio en inglés.</p>
        </div>
        
        <div id="quiz-container">
            <!-- Will be populated by JavaScript -->
        </div>
        
        <div class="mt-8 flex justify-between items-center">
            <div class="text-gray-600">
                <span id="total-correct">0</span> correctas de <span id="total-questions">0</span> preguntas
            </div>
            <button id="next-button" class="no-print px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600">
                Siguiente
            </button>
        </div>
        
        <div id="quiz-summary" class="mt-8 hidden">
            <h2 class="text-xl font-bold mb-4">Resumen de la Prueba</h2>
            <div class="bg-white rounded-lg shadow p-4">
                <p class="text-lg mb-4">Has completado la prueba!</p>
                <p class="font-semibold text-lg">Tu puntuación: <span id="final-score"></span></p>
                <div class="mt-4" id="summary-details">
                    <!-- Will be populated by JavaScript -->
                </div>
                
                <div class="mt-6 border-t pt-4">
                    <h3 class="font-bold mb-2">Enviar resultados:</h3>
                    <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
                        <div>
                            <label for="email-input" class="block text-sm font-medium text-gray-700 mb-1">Por correo electrónico:</label>
                            <div class="flex">
                                <input type="email" id="email-input" placeholder="tu@email.com" class="flex-1 p-2 border rounded-l focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <button id="send-email" class="bg-blue-500 text-white px-3 py-2 rounded-r hover:bg-blue-600">Enviar</button>
                            </div>
                        </div>
                        
                        <div>
                            <label for="phone-input" class="block text-sm font-medium text-gray-700 mb-1">Por mensaje de texto:</label>
                            <div class="flex">
                                <input type="tel" id="phone-input" placeholder="Tu número de teléfono" class="flex-1 p-2 border rounded-l focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <button id="send-sms" class="bg-blue-500 text-white px-3 py-2 rounded-r hover:bg-blue-600">Enviar</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-6 pt-4 border-t">
                    <button id="reiniciar-button" class="w-full px-4 py-3 bg-yellow-500 text-white rounded hover:bg-yellow-600 font-bold text-lg">
                        Comenzar de nuevo / Borrar todo
                    </button>
                    <p class="text-sm text-gray-500 mt-2 text-center">
                        Esto borrará todas tus respuestas y reiniciará el quiz
                    </p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // EDIT THIS EMAIL ADDRESS
        const INSTRUCTOR_EMAIL = "ciera@bensonenterprises.com";
        
        // Quiz questions
        const quizQuestions = [
            {
                audio: "Cut back the branches.",
                options: [
                    "Riegue las plantas.",
                    "Pode las ramas.",
                    "Plante los arbustos.",
                    "Mueva los árboles."
                ],
                correctIndex: 1
            },
            {
                audio: "Did you rake the beds?",
                options: [
                    "¿Rastrillaste las camas?",
                    "¿Cortaste las plantas?",
                    "¿Regaste las flores?",
                    "¿Plantaste las semillas?"
                ],
                correctIndex: 0
            },
            {
                audio: "We need more mulch.",
                options: [
                    "Necesitamos más agua.",
                    "Necesitamos más herramientas.",
                    "Necesitamos más mantillo.",
                    "Necesitamos más plantas."
                ],
                correctIndex: 2
            },
            {
                audio: "Where are the leaf bags?",
                options: [
                    "¿Dónde están las tijeras?",
                    "¿Dónde están las bolsas para hojas?",
                    "¿Dónde están los rastrillos?",
                    "¿Dónde están los guantes?"
                ],
                correctIndex: 1
            },
            {
                audio: "Take out the dead plants.",
                options: [
                    "Quite las plantas muertas.",
                    "Riegue las plantas secas.",
                    "Mueva las plantas viejas.",
                    "Corte las plantas altas."
                ],
                correctIndex: 0
            },
            {
                audio: "Clean up the walkway.",
                options: [
                    "Limpie la casa.",
                    "Limpie el garaje.",
                    "Limpie el camino.",
                    "Limpie el patio."
                ],
                correctIndex: 2
            },
            {
                audio: "Can you finish by noon?",
                options: [
                    "¿Puedes empezar mañana?",
                    "¿Puedes terminar al mediodía?",
                    "¿Puedes trabajar esta tarde?",
                    "¿Puedes venir temprano?"
                ],
                correctIndex: 1
            },
            {
                audio: "Trim the hedge straight.",
                options: [
                    "Corte el césped alto.",
                    "Plante el arbusto nuevo.",
                    "Riegue el jardín entero.",
                    "Pode el seto recto."
                ],
                correctIndex: 3
            },
            {
                audio: "Bring the wheelbarrow here.",
                options: [
                    "Traiga el rastrillo aquí.",
                    "Traiga la carretilla aquí.",
                    "Traiga las tijeras aquí.",
                    "Traiga la manguera aquí."
                ],
                correctIndex: 1
            },
            {
                audio: "Use the blower for leaves.",
                options: [
                    "Use el cortacésped para el pasto.",
                    "Use la pala para la tierra.",
                    "Use el soplador para las hojas.",
                    "Use el rastrillo para los escombros."
                ],
                correctIndex: 2
            }
        ];

        // State variables
        let currentQuestion = 0;
        let userAnswers = [];
        let quizCompleted = false;
        let isAnswerRevealed = false;
        let voiceError = false;
        let englishVoice = null;
        let isOffline = !navigator.onLine;

        // DOM elements
        const quizContainer = document.getElementById('quiz-container');
        const nextButton = document.getElementById('next-button');
        const scoreDisplay = document.getElementById('score-display');
        const totalCorrectDisplay = document.getElementById('total-correct');
        const totalQuestionsDisplay = document.getElementById('total-questions');
        const quizSummary = document.getElementById('quiz-summary');
        const finalScoreDisplay = document.getElementById('final-score');
        const summaryDetails = document.getElementById('summary-details');
        const studentNameInput = document.getElementById('student-name');
        const offlineIndicator = document.getElementById('offlineIndicator');
        const previousSessionAlert = document.getElementById('previousSessionAlert');
        const installPrompt = document.getElementById('install-prompt');
        const toast = document.getElementById('toast');

        // Show install prompt for PWA
        if ('standalone' in navigator || window.matchMedia('(display-mode: standalone)').matches) {
            // Already installed as PWA
            installPrompt.classList.add('hidden');
        } else {
            // Show install instructions
            installPrompt.classList.remove('hidden');
        }

        // Update offline indicator
        function updateOfflineStatus() {
            isOffline = !navigator.onLine;
            if (isOffline) {
                offlineIndicator.classList.remove('hidden');
                showToast('Trabajando sin conexión - Tus datos están guardados localmente');
            } else {
                offlineIndicator.classList.add('hidden');
            }
        }

        // Show toast message
        function showToast(message, duration = 3000) {
            toast.textContent = message;
            toast.classList.add('show');
            setTimeout(() => {
                toast.classList.remove('show');
            }, duration);
        }

        // Initialize PWA
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                // Create a simple service worker script if none exists
                const swContent = `
                // This is a basic service worker for offline functionality
                const CACHE_NAME = 'quiz-cache-v1';
                const urlsToCache = [
                    './',
                    './index.html',
                    'https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css'
                ];

                self.addEventListener('install', event => {
                    event.waitUntil(
                        caches.open(CACHE_NAME)
                            .then(cache => cache.addAll(urlsToCache))
                    );
                });

                self.addEventListener('fetch', event => {
                    event.respondWith(
                        caches.match(event.request)
                            .then(response => response || fetch(event.request))
                            .catch(() => {
                                // Return a fallback response for HTML
                                if (event.request.mode === 'navigate') {
                                    return caches.match('./index.html');
                                }
                                return new Response('Offline content not available');
                            })
                    );
                });
                `;
                
                // Create a Blob with the service worker content
                const blob = new Blob([swContent], {type: 'application/javascript'});
                const swUrl = URL.createObjectURL(blob);
                
                // Register the service worker
                navigator.serviceWorker.register(swUrl)
                    .then(registration => {
                        console.log('ServiceWorker registered with scope:', registration.scope);
                    })
                    .catch(error => {
                        console.log('ServiceWorker registration failed:', error);
                    });
            });
        }

        // Track online/offline status
        window.addEventListener('online', updateOfflineStatus);
        window.addEventListener('offline', updateOfflineStatus);
        updateOfflineStatus();

        // Initialize voice synthesis
        function initVoices() {
            if (!window.speechSynthesis) {
                voiceError = true;
                return;
            }
            
            const voices = window.speechSynthesis.getVoices();
            englishVoice = voices.find(v => v.lang === 'en-US') || 
                      voices.find(v => v.lang.startsWith('en-'));
            
            if (!englishVoice) {
                voiceError = true;
            }
        }

        if (window.speechSynthesis) {
            if (window.speechSynthesis.getVoices().length > 0) {
                initVoices();
            }
            window.speechSynthesis.onvoiceschanged = initVoices;
        } else {
            voiceError = true;
        }

        // Speak the text with TTS
        function speak(text) {
            if (voiceError || !window.speechSynthesis) {
                alert('Error: Text-to-speech no disponible. Por favor, asegúrate de que tu navegador tiene instalado el idioma inglés.');
                return;
            }
            
            // Stop any ongoing speech
            window.speechSynthesis.cancel();
            
            const utterance = new SpeechSynthesisUtterance(text);
            if (englishVoice) {
                utterance.voice = englishVoice;
            } else {
                utterance.lang = 'en-US';
            }
            utterance.rate = 0.8; // Slightly slower for learning
            
            window.speechSynthesis.speak(utterance);
        }

        // Save state to localStorage
        function saveState() {
            const state = {
                currentQuestion,
                userAnswers,
                quizCompleted,
                studentName: studentNameInput.value.trim()
            };
            localStorage.setItem('quizState', JSON.stringify(state));
        }

        // Load state from localStorage
        function loadState() {
            const savedState = localStorage.getItem('quizState');
            if (savedState) {
                try {
                    const state = JSON.parse(savedState);
                    currentQuestion = state.currentQuestion || 0;
                    userAnswers = state.userAnswers || [];
                    quizCompleted = state.quizCompleted || false;
                    
                    if (state.studentName) {
                        studentNameInput.value = state.studentName;
                    }
                    
                    // Show previous session alert
                    if (userAnswers.length > 0) {
                        previousSessionAlert.classList.remove('hidden');
                    }
                    
                    return true;
                } catch (e) {
                    console.error('Error loading saved state:', e);
                    return false;
                }
            }
            return false;
        }

        // Clear saved state
        function clearState() {
            localStorage.removeItem('quizState');
            showToast('Se han borrado todos los datos guardados');
        }

        // Update the score display
        function updateScore() {
            let correctCount = 0;
            userAnswers.forEach(answer => {
                if (answer.isCorrect) correctCount++;
            });
            
            scoreDisplay.textContent = `${correctCount}/${quizQuestions.length}`;
            totalCorrectDisplay.textContent = correctCount;
            totalQuestionsDisplay.textContent = quizQuestions.length;
            
            if (quizCompleted) {
                finalScoreDisplay.textContent = `${correctCount} de ${quizQuestions.length}`;
            }
            
            // Save state after score update
            saveState();
        }

        // Generate HTML for a question
        function generateQuestionHTML(questionIndex) {
            const question = quizQuestions[questionIndex];
            const userAnswer = userAnswers[questionIndex];
            
            let html = `
                <div class="bg-white rounded-lg shadow p-4 mb-6 question" data-index="${questionIndex}">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-lg font-bold">Pregunta ${questionIndex + 1}</h2>
                        <button class="play-audio px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 flex items-center">
                            <span class="mr-1">🔊</span> Escuchar
                        </button>
                    </div>
                    <div class="mb-2 text-gray-600 italic">
                        Selecciona la traducción correcta al español
                    </div>
                    <div class="grid grid-cols-1 gap-2">
            `;
            
            question.options.forEach((option, index) => {
                let buttonClass = "option-button p-3 rounded border text-left";
                
                if (userAnswer) {
                    if (index === question.correctIndex) {
                        buttonClass += " correct-answer";
                    } else if (index === userAnswer.selectedIndex && index !== question.correctIndex) {
                        buttonClass += " incorrect-answer";
                    }
                    
                    if (index === userAnswer.selectedIndex) {
                        buttonClass += " user-selected";
                    }
                }
                
                html += `
                    <button class="${buttonClass}" data-index="${index}">
                        ${index + 1}. ${option}
                    </button>
                `;
            });
            
            html += `
                    </div>
                </div>
            `;
            
            return html;
        }

        // Handle option click
        function handleOptionClick(event) {
            if (!event.target.classList.contains('option-button') || isAnswerRevealed) return;
            
            const questionElement = event.target.closest('.question');
            const questionIndex = parseInt(questionElement.dataset.index);
            const optionIndex = parseInt(event.target.dataset.index);
            
            isAnswerRevealed = true;
            
            const isCorrect = optionIndex === quizQuestions[questionIndex].correctIndex;
            userAnswers[questionIndex] = {
                selectedIndex: optionIndex,
                isCorrect: isCorrect
            };
            
            // Update UI
            const options = questionElement.querySelectorAll('.option-button');
            options.forEach((option, index) => {
                if (index === quizQuestions[questionIndex].correctIndex) {
                    option.classList.add('correct-answer');
                } else if (index === optionIndex && !isCorrect) {
                    option.classList.add('incorrect-answer');
                }
                
                if (index === optionIndex) {
                    option.classList.add('user-selected');
                }
            });
            
            updateScore();
        }

        // Handle play audio button click
        function handlePlayAudio(event) {
            const questionElement = event.target.closest('.question');
            const questionIndex = parseInt(questionElement.dataset.index);
            speak(quizQuestions[questionIndex].audio);
        }

        // Show the current question
        function showCurrentQuestion() {
            quizContainer.innerHTML = generateQuestionHTML(currentQuestion);
            
            // Add event listeners
            const playAudioButton = quizContainer.querySelector('.play-audio');
            playAudioButton.addEventListener('click', handlePlayAudio);
            
            const options = quizContainer.querySelectorAll('.option-button');
            options.forEach(option => {
                option.addEventListener('click', handleOptionClick);
            });
            
            // Auto play audio for new question
            setTimeout(() => {
                speak(quizQuestions[currentQuestion].audio);
            }, 500);
            
            isAnswerRevealed = userAnswers[currentQuestion] !== undefined;
            
            // Update the next button
            if (currentQuestion === quizQuestions.length - 1) {
                nextButton.textContent = 'Finalizar';
            } else {
                nextButton.textContent = 'Siguiente';
            }
            
            // Save state after showing question
            saveState();
        }

        // Move to the next question
        function moveToNextQuestion() {
            // Check if name is entered on first question
            if (currentQuestion === 0 && !studentNameInput.value.trim()) {
                alert('Por favor, escribe tu nombre antes de continuar.');
                studentNameInput.focus();
                return;
            }
            
            if (!isAnswerRevealed) {
                // If user hasn't answered yet, remind them
                alert('Por favor, selecciona una respuesta antes de continuar.');
                return;
            }
            
            if (currentQuestion < quizQuestions.length - 1) {
                currentQuestion++;
                isAnswerRevealed = false;
                showCurrentQuestion();
            } else {
                // End of quiz
                completeQuiz();
            }
        }

        // Complete the quiz and show summary
        function completeQuiz() {
            quizCompleted = true;
            updateScore();
            
            const studentName = studentNameInput.value.trim() || 'Estudiante';
            
            // Generate summary details
            let summaryHTML = '<div class="space-y-3">';
            summaryHTML += `<div class="font-medium mb-2">Nombre: ${studentName}</div>`;
            
            userAnswers.forEach((answer, index) => {
                const question = quizQuestions[index];
                const correctOption = question.options[question.correctIndex];
                const userOption = question.options[answer.selectedIndex];
                
                summaryHTML += `
                    <div class="border-b pb-2">
                        <div class="font-medium">Pregunta ${index + 1}: "${question.audio}"</div>
                        <div class="ml-4 text-green-600">Correcta: ${correctOption}</div>
                        <div class="ml-4 ${answer.isCorrect ? 'text-green-600' : 'text-red-600'}">
                            Tu respuesta: ${userOption} ${answer.isCorrect ? '✓' : '✗'}
                        </div>
                    </div>
                `;
            });
            
            summaryHTML += '</div>';
            summaryDetails.innerHTML = summaryHTML;
            
            // Hide quiz and show summary
            quizContainer.classList.add('hidden');
            nextButton.classList.add('hidden');
            quizSummary.classList.remove('hidden');
            
            // Save completed state
            saveState();
        }

        // Send results by email
        function sendResultsByEmail(toEmail) {
            const studentName = studentNameInput.value.trim() || 'Estudiante';
            const quizTitle = document.querySelector('h1').textContent;
            const today = new Date().toLocaleDateString();
            
            // Create results text
            let resultsText = `Resultados del Quiz - ${studentName} - ${quizTitle}\n\n`;
            resultsText += `Nombre: ${studentName}\n`;
            resultsText += `Fecha: ${today}\n`;
            resultsText += `Puntuación: ${totalCorrectDisplay.textContent} de ${totalQuestionsDisplay.textContent}\n\n`;
            
            userAnswers.forEach((answer, index) => {
                const question = quizQuestions[index];
                const correctOption = question.options[question.correctIndex];
                const userOption = question.options[answer.selectedIndex];
                
                resultsText += `Pregunta ${index + 1}: "${question.audio}"\n`;
                resultsText += `- Correcta: ${correctOption}\n`;
                resultsText += `- Respuesta: ${userOption} ${answer.isCorrect ? '✓' : '✗'}\n\n`;
            });
            
            // Create email content
            const emailSubject = `Resultados: ${studentName} - ${quizTitle}`;
            const emailBody = `Results for ${studentName} for ${quizTitle} on ${today}\n\n${resultsText}`;
            
            // Use recipient email or default instructor email
            const recipientEmail = toEmail || INSTRUCTOR_EMAIL;
            
            // Create mailto link
            const mailtoLink = `mailto:${recipientEmail}?subject=${encodeURIComponent(emailSubject)}&body=${encodeURIComponent(emailBody)}`;
            
            // Open email client
            window.location.href = mailtoLink;
            
            showToast('Abriendo cliente de correo...');
            return resultsText;
        }

        // Send results by SMS
        function sendResultsBySMS(phoneNumber) {
            const studentName = studentNameInput.value.trim() || 'Estudiante';
            const quizTitle = document.querySelector('h1').textContent;
            
            // Create a short summary for SMS
            let correctCount = 0;
            userAnswers.forEach(answer => {
                if (answer.isCorrect) correctCount++;
            });
            
            const smsText = `Resultados de ${studentName}: ${correctCount} de ${quizQuestions.length} correctas en "${quizTitle}". ${new Date().toLocaleDateString()}`;
            
            // Create SMS link (works on most mobile devices)
            const smsLink = `sms:${phoneNumber}?body=${encodeURIComponent(smsText)}`;
            
            // Open SMS app
            window.location.href = smsLink;
            
            showToast('Abriendo aplicación de mensajes...');
        }

        // Reset quiz
        function resetQuiz() {
            if (confirm('¿Estás seguro que quieres borrar todas tus respuestas y comenzar de nuevo?')) {
                currentQuestion = 0;
                userAnswers = [];
                quizCompleted = false;
                isAnswerRevealed = false;
                
                // Reset UI
                quizSummary.classList.add('hidden');
                quizContainer.classList.remove('hidden');
                nextButton.classList.remove('hidden');
                previousSessionAlert.classList.add('hidden');
                
                // Clear saved state
                clearState();
                
                // Reset score
                updateScore();
                
                // Show first question
                showCurrentQuestion();
            }
        }

        // Initialize quiz
        function initQuiz() {
            // Check for previous session
            const hasPreviousSession = loadState();
            
            // Initialize score display
            totalQuestionsDisplay.textContent = quizQuestions.length;
            updateScore();
            
            // Add event listeners
            nextButton.addEventListener('click', moveToNextQuestion);
            
            document.getElementById('reiniciar-button').addEventListener('click', resetQuiz);
            
            document.getElementById('send-email').addEventListener('click', () => {
                const emailInput = document.getElementById('email-input');
                const email = emailInput.value.trim();
                if (email) {
                    sendResultsByEmail(email);
                } else {
                    alert('Por favor, ingresa una dirección de correo electrónico válida.');
                    emailInput.focus();
                }
            });
            
            document.getElementById('send-sms').addEventListener('click', () => {
                const phoneInput = document.getElementById('phone-input');
                const phone = phoneInput.value.trim();
                if (phone) {
                    sendResultsBySMS(phone);
                } else {
                    alert('Por favor, ingresa un número de teléfono válido.');
                    phoneInput.focus();
                }
            });
            
            // Handle name input changes
            studentNameInput.addEventListener('change', saveState);
            
            // Start quiz or show completed screen
            if (hasPreviousSession && quizCompleted) {
                completeQuiz();
            } else {
                showCurrentQuestion();
            }
        }
        
        // Start the quiz
        document.addEventListener('DOMContentLoaded', initQuiz);
    </script>
</body>
</html>